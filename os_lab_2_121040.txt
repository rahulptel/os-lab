sudo cat -E /home/rahul/Desktop/txt1.txt
Hi. This is first text file. It is used for testing.$

spell -n /home/rahul/Desktop/txt1.txt
no output

(shift)!!
ls

seq 1 20 2000
1
21
41
61
81
101
121
141
161
181
201
221
241
261
281
301
321
341
361
381
401
421
441
461
481
501
521
541
561
581
601
621
641
661
681
701
721
741
761
781
801
821
841
861
881
901
921
941
961
981
1001
1021
1041
1061
1081
1101
1121
1141
1161
1181
1201
1221
1241
1261
1281
1301
1321
1341
1361
1381
1401
1421
1441
1461
1481
1501
1521
1541
1561
1581
1601
1621
1641
1661
1681
1701
1721
1741
1761
1781
1801
1821
1841
1861
1881
1901
1921
1941
1961
1981
2001
2021
2041
2061
2081
2101
2121
2141
2161
2181
2201
2221
2241
2261
2281
2301
2321
2341
2361
2381
2401
2421
2441
2461
2481
2501
2521
2541
2561
2581
2601
2621
2641
2661
2681
2701
2721
2741
2761
2781
2801
2821
2841
2861
2881
2901
2921
2941
2961
2981
3001
3021
3041
3061
3081
3101
3121
3141
3161
3181
3201
3221
3241
3261
3281
3301
3321
3341
3361
3381
3401
3421
3441
3461
3481
3501
3521
3541
3561
3581
3601
3621
3641
3661
3681
3701
3721
3741
3761
3781
3801
3821
3841
3861
3881
3901
3921
3941
3961
3981
4001
4021
4041
4061
4081
4101
4121
4141
4161
4181
4201
4221
4241
4261
4281
4301
4321
4341
4361
4381
4401
4421
4441
4461
4481
4501
4521
4541
4561
4581
4601
4621
4641
4661
4681
4701
4721
4741
4761
4781
4801
4821
4841
4861
4881
4901
4921
4941
4961
4981
5001
5021
5041
5061
5081
5101
5121
5141
5161
5181
5201
5221
5241
5261
5281
5301
5321
5341
5361
5381
5401
5421
5441
5461
5481
5501
5521
5541
5561
5581
5601
5621
5641
5661
5681
5701
5721
5741
5761
5781
5801
5821
5841
5861
5881
5901
5921
5941
5961
5981
6001
6021
6041
6061
6081
6101
6121
6141
6161
6181
6201
6221
6241
6261
6281
6301
6321
6341
6361
6381
6401
6421
6441
6461
6481
6501
6521
6541
6561
6581
6601
6621
6641
6661
6681
6701
6721
6741
6761
6781
6801
6821
6841
6861
6881
6901
6921
6941
6961
6981
7001
7021
7041
7061
7081
7101
7121
7141
7161
7181
7201
7221
7241
7261
7281
7301
7321
7341
7361
7381
7401
7421
7441
7461
7481
7501
7521
7541
7561
7581
7601
7621
7641
7661
7681
7701
7721
7741
7761
7781
7801
7821
7841
7861
7881
7901
7921
7941
7961
7981
8001
8021
8041
8061
8081
8101
8121
8141
8161
8181
8201
8221
8241
8261
8281
8301
8321
8341
8361
8381
8401
8421
8441
8461
8481
8501
8521
8541
8561
8581
8601
8621
8641
8661
8681
8701
8721
8741
8761
8781
8801
8821
8841
8861
8881
8901
8921
8941
8961
8981
9001
9021
9041
9061
9081
9101
9121
9141
9161
9181
9201
9221
9241
9261
9281
9301
9321
9341
9361
9381
9401
9421
9441
9461
9481
9501
9521
9541
9561
9581
9601
9621
9641
9661
9681
9701
9721
9741
9761
9781
9801
9821
9841
9861
9881
9901
9921
9941
9961
9981

uname -u
rahul

uname -n
rahul


Files txt1.txt and txt2.txt differ


Filesystem      Size  Used Avail Use% Mounted on
/dev/sda6        17G  4.0G   12G  26% /
4	txt1.txt
4.0K	txt1.txt
txt1.txt txt2.txt differ: byte 13, line 1 is 146 f 164 t
Usage: tty [OPTION]...
Print the file name of the terminal connected to standard input.

  -s, --silent, --quiet   print nothing, only return an exit status
      --help     display this help and exit
      --version  output version information and exit

Report tty bugs to bug-coreutils@gnu.org
GNU coreutils home page: <http://www.gnu.org/software/coreutils/>
General help using GNU software: <http://www.gnu.org/gethelp/>
For complete documentation, run: info coreutils 'tty invocation'
NAME     LINE         TIME             COMMENT
rahul    :0           2015-01-25 19:39 (:0)
rahul    pts/0        2015-01-25 22:57 (:0)
fsck from util-linux 2.20.1
/dev/sda6 is mounted.
Usage: passwd [options] [LOGIN]

Options:
  -a, --all                     report password status on all accounts
  -d, --delete                  delete the password for the named account
  -e, --expire                  force expire the password for the named account
  -h, --help                    display this help message and exit
  -k, --keep-tokens             change password only if expired
  -i, --inactive INACTIVE       set password inactive after expiration
                                to INACTIVE
  -l, --lock                    lock the password of the named account
  -n, --mindays MIN_DAYS        set minimum number of days before password
                                change to MIN_DAYS
  -q, --quiet                   quiet mode
  -r, --repository REPOSITORY   change password in REPOSITORY repository
  -R, --root CHROOT_DIR         directory to chroot into
  -S, --status                  report password status on the named account
  -u, --unlock                  unlock the password of the named account
  -w, --warndays WARN_DAYS      set expiration warning days to WARN_DAYS
  -x, --maxdays MAX_DAYS        set maximum number of days before password
                                change to MAX_DAYS

Usage: aspell [options] <command>
<command> is one of:
  -?|usage         display a brief usage message
  help             display a detailed help message
  -c|check <file>  to check a file
  -a|pipe          "ispell -a" compatibility mode
  [dump] config    dumps the current configuration to stdout
  config <key>     prints the current value of an option
  [dump] dicts | filters | modes
    lists available dictionaries / filters / filter modes
[options] is any of the following:
  --encoding=<str>            encoding to expect data to be in
  --mode=<str>                filter mode
  -l,--lang=<str>             language code
  -d,--master=<str>           base name of the main dictionary to use
  --sug-mode=<str>            suggestion mode
iw version 3.4
Usage:	iw [options] command
Options:
	--debug		enable netlink debugging
	--version	show version (3.4)
Commands:
	help [command]
		Print usage for all or a specific command, e.g.
		"help wowlan" or "help wowlan enable".

	event [-t] [-r] [-f]
		Monitor events from the kernel.
		-t - print timestamp
		-r - print relative timstamp
		-f - print full frame for auth/assoc etc.

	phy
	list
		List all wireless devices and their capabilities.

	phy <phyname> info
		Show capabilities for the specified wireless device.

	dev
		List all network interfaces for wireless hardware.

	dev <devname> info
		Show information for this interface.

	dev <devname> del
		Remove this virtual interface

	dev <devname> interface add <name> type <type> [mesh_id <meshid>] [4addr on|off] [flags <flag>*]
	phy <phyname> interface add <name> type <type> [mesh_id <meshid>] [4addr on|off] [flags <flag>*]
		Add a new virtual interface with the given configuration.
		Valid interface types are: managed, ibss, monitor, mesh, wds.
		
		The flags are only used for monitor interfaces, valid flags are:
		none:     no special flags
		fcsfail:  show frames with FCS errors
		control:  show control frames
		otherbss: show frames from other BSSes
		cook:     use cooked mode
		
		The mesh_id is used only for mesh mode.

	dev <devname> ibss join <SSID> <freq in MHz> [HT20|HT40+|HT40-|NOHT] [fixed-freq] [<fixed bssid>] [beacon-interval <TU>] [basic-rates <rate in Mbps,rate2,...>] [mcast-rate <rate in Mbps>] [key d:0:abcde]
		Join the IBSS cell with the given SSID, if it doesn't exist create
		it on the given frequency. When fixed frequency is requested, don't
		join/create a cell on a different frequency. When a fixed BSSID is
		requested use that BSSID and do not adopt another cell's BSSID even
		if it has higher TSF and the same SSID. If an IBSS is created, create
		it with the specified basic-rates, multicast-rate and beacon-interval.

	dev <devname> ibss leave
		Leave the current IBSS cell.

	dev <devname> station dump
		List all stations known, e.g. the AP on managed interfaces

	dev <devname> station set <MAC address> vlan <ifindex>
		Set an AP VLAN for this station.

	dev <devname> station set <MAC address> plink_action <open|block>
		Set mesh peer link action for this station (peer).

	dev <devname> station del <MAC address>
		Remove the given station entry (use with caution!)

	dev <devname> station get <MAC address>
		Get information for a specific station.

	dev <devname> survey dump
		List all gathered channel survey data

	dev <devname> mesh leave
		Leave a mesh.

	dev <devname> mesh join <mesh ID> [mcast-rate <rate in Mbps>] [<param>=<value>]*
		Join a mesh with the given mesh ID with mcast-rate and mesh parameters.

	dev <devname> mpath dump
		List known mesh paths.

	dev <devname> mpath set <destination MAC address> next_hop <next hop MAC address>
		Set an existing mesh path's next hop.

	dev <devname> mpath new <destination MAC address> next_hop <next hop MAC address>
		Create a new mesh path (instead of relying on automatic discovery).

	dev <devname> mpath del <MAC address>
		Remove the mesh path to the given node.

	dev <devname> mpath get <MAC address>
		Get information on mesh path to the given node.

	dev <devname> scan [-u] [freq <freq>*] [ies <hex as 00:11:..>] [ssid <ssid>*|passive]
		Scan on the given frequencies and probe for the given SSIDs
		(or wildcard if not given) unless passive scanning is requested.
		If -u is specified print unknown data in the scan results.
		Specified (vendor) IEs must be well-formed.

	dev <devname> scan trigger [freq <freq>*] [ies <hex as 00:11:..>] [ssid <ssid>*|passive]
		Trigger a scan on the given frequencies with probing for the given
		SSIDs (or wildcard if not given) unless passive scanning is requested.

	dev <devname> scan dump [-u]
		Dump the current scan results. If -u is specified, print unknown
		data in scan results.

	reg get
		Print out the kernel's current regulatory domain information.

	reg set <ISO/IEC 3166-1 alpha2>
		Notify the kernel about the current regulatory domain.

	dev <devname> connect [-w] <SSID> [<freq in MHz>] [<bssid>] [key 0:abcde d:1:6162636465]
		Join the network with the given SSID (and frequency, BSSID).
		With -w, wait for the connect to finish or fail.

	dev <devname> disconnect
		Disconnect from the current network.

	dev <devname> link
		Print information about the current link, if any.

	dev <devname> offchannel <freq> <duration>
		Leave operating channel and go to the given channel for a while.

	dev <devname> cqm rssi <threshold|off> [<hysteresis>]
		Set connection quality monitor RSSI threshold.
		

	phy <phyname> wowlan show 
		Show WoWLAN status.

	phy <phyname> wowlan disable 
		Disable WoWLAN.

	phy <phyname> wowlan enable [any] [disconnect] [magic-packet] [gtk-rekey-failure] [eap-identity-request] [4way-handshake] [rfkill-release] [patterns <pattern>*]
		Enable WoWLAN with the given triggers.
		Each pattern is given as a bytestring with '-' in places where any byte
		may be present, e.g. 00:11:22:-:44 will match 00:11:22:33:44 and
		00:11:22:33:ff:44 etc.

	dev <devname> roc start <freq> <time>
		

	phy <phyname> set antenna <bitmap> | all | <tx bitmap> <rx bitmap>
		Set a bitmap of allowed antennas to use for TX and RX.
		The driver may reject antenna configurations it cannot support.

	dev <devname> set txpower <auto|fixed|limit> [<tx power in mBm>]
		Specify transmit power level and setting type.

	phy <phyname> set txpower <auto|fixed|limit> [<tx power in mBm>]
		Specify transmit power level and setting type.

	phy <phyname> set distance <distance>
		Set appropriate coverage class for given link distance in meters.
		Valid values: 0 - 114750

	phy <phyname> set coverage <coverage class>
		Set coverage class (1 for every 3 usec of air propagation time).
		Valid values: 0 - 255.

	phy <phyname> set netns <pid>
		Put this wireless device into a different network namespace

	phy <phyname> set rts <rts threshold|off>
		Set rts threshold.

	phy <phyname> set frag <fragmentation threshold|off>
		Set fragmentation threshold.

	dev <devname> set channel <channel> [HT20|HT40+|HT40-]
	phy <phyname> set channel <channel> [HT20|HT40+|HT40-]
	dev <devname> set freq <freq> [HT20|HT40+|HT40-]
	phy <phyname> set freq <freq> [HT20|HT40+|HT40-]
		Set frequency/channel the hardware is using, including HT
		configuration.

	phy <phyname> set name <new name>
		Rename this wireless device.

	dev <devname> set peer <MAC address>
		Set interface WDS peer.

	dev <devname> set noack_map <map>
		Set the NoAck map for the TIDs. (0x0009 = BE, 0x0006 = BK, 0x0030 = VI, 0x00C0 = VO)

	dev <devname> set 4addr <on|off>
		Set interface 4addr (WDS) mode.

	dev <devname> set type <type>
		Set interface type/mode.
		Valid interface types are: managed, ibss, monitor, mesh, wds.

	dev <devname> set meshid <meshid>
	dev <devname> set monitor <flag>*
		Set monitor flags. Valid flags are:
		none:     no special flags
		fcsfail:  show frames with FCS errors
		control:  show control frames
		otherbss: show frames from other BSSes
		cook:     use cooked mode

	dev <devname> set mesh_param <param>=<value> [<param>=<value>]*
		Set mesh parameter (run command without any to see available ones).

	dev <devname> set power_save <on|off>
		Set power save state to on or off.

	dev <devname> set bitrates [legacy-<2.4|5> <legacy rate in Mbps>*] [mcs-<2.4|5> <MCS index>*]
		Sets up the specified rate masks.
		Not passing any arguments would clear the existing mask (if any).

	dev <devname> get mesh_param [<param>]
		Retrieve mesh parameter (run command without any to see available ones).

	dev <devname> get power_save <param>
		Retrieve power save state.


You can omit the 'phy' or 'dev' if the identification is unique,
e.g. "iw wlan0 info" or "iw phy0 info". (Don't when scripting.)

Do NOT screenscrape this tool, we don't consider its output stable.

.gnitset rof desu si tI .elif txet tsrif si sihT .iH
Usage: chown [OPTION]... [OWNER][:[GROUP]] FILE...
  or:  chown [OPTION]... --reference=RFILE FILE...
Change the owner and/or group of each FILE to OWNER and/or GROUP.
With --reference, change the owner and group of each FILE to those of RFILE.

  -c, --changes          like verbose but report only when a change is made
  -f, --silent, --quiet  suppress most error messages
  -v, --verbose          output a diagnostic for every file processed
      --dereference      affect the referent of each symbolic link (this is
                         the default), rather than the symbolic link itself
  -h, --no-dereference   affect symbolic links instead of any referenced file
                         (useful only on systems that can change the
                         ownership of a symlink)
      --from=CURRENT_OWNER:CURRENT_GROUP
                         change the owner and/or group of each file only if
                         its current owner and/or group match those specified
                         here.  Either may be omitted, in which case a match
                         is not required for the omitted attribute
      --no-preserve-root  do not treat '/' specially (the default)
      --preserve-root    fail to operate recursively on '/'
      --reference=RFILE  use RFILE's owner and group rather than
                         specifying OWNER:GROUP values
  -R, --recursive        operate on files and directories recursively

The following options modify how a hierarchy is traversed when the -R
option is also specified.  If more than one is specified, only the final
one takes effect.

  -H                     if a command line argument is a symbolic link
                         to a directory, traverse it
  -L                     traverse every symbolic link to a directory
                         encountered
  -P                     do not traverse any symbolic links (default)

      --help     display this help and exit
      --version  output version information and exit

Owner is unchanged if missing.  Group is unchanged if missing, but changed
to login group if implied by a ':' following a symbolic OWNER.
OWNER and GROUP may be numeric as well as symbolic.

Examples:
  chown root /u        Change the owner of /u to "root".
  chown root:staff /u  Likewise, but also change its group to "staff".
  chown -hR root /u    Change the owner of /u and subfiles to "root".

Report chown bugs to bug-coreutils@gnu.org
GNU coreutils home page: <http://www.gnu.org/software/coreutils/>
General help using GNU software: <http://www.gnu.org/gethelp/>
For complete documentation, run: info coreutils 'chown invocation'
enable .
enable :
enable [
enable alias
enable bg
enable bind
enable break
enable builtin
enable caller
enable cd
enable command
enable compgen
enable complete
enable compopt
enable continue
enable declare
enable dirs
enable disown
enable echo
enable enable
enable eval
enable exec
enable exit
enable export
enable false
enable fc
enable fg
enable getopts
enable hash
enable help
enable history
enable jobs
enable kill
enable let
enable local
enable logout
enable mapfile
enable popd
enable printf
enable pushd
enable pwd
enable read
enable readarray
enable readonly
enable return
enable set
enable shift
enable shopt
enable source
enable suspend
enable test
enable times
enable trap
enable true
enable type
enable typeset
enable ulimit
enable umask
enable unalias
enable unset
enable wait
rahul    pts/0        :0               Sun Jan 25 22:57   still logged in   
rahul    :0           :0               Sun Jan 25 19:39   still logged in   
reboot   system boot  3.13.0-32-generi Sun Jan 25 19:39 - 23:23  (03:44)    
reboot   system boot  3.13.0-32-generi Sun Jan 25 05:21 - 05:21  (00:00)    
rahul    :0           :0               Fri Jan 23 16:14 - down   (00:00)    
reboot   system boot  3.13.0-32-generi Fri Jan 23 16:13 - 16:14  (00:01)    
rahul    pts/23       :0               Fri Jan 23 14:26 - 14:26  (00:00)    
rahul    pts/0        :0               Fri Jan 23 11:24 - 14:30  (03:05)    
rahul    :0           :0               Fri Jan 23 11:16 - down   (03:14)    
reboot   system boot  3.13.0-32-generi Fri Jan 23 11:16 - 14:30  (03:14)    
rahul    :0           :0               Thu Jan 22 13:55 - down   (00:10)    
reboot   system boot  3.13.0-32-generi Thu Jan 22 13:55 - 14:06  (00:11)    

wtmp begins Thu Jan 22 13:55:06 2015
Hi. This is text file 2. This is for temperory.
Hi. This is text file 2. This is for temperory.
Usage: yes [STRING]...
  or:  yes OPTION
Repeatedly output a line with all specified STRING(s), or 'y'.

      --help     display this help and exit
      --version  output version information and exit

Report yes bugs to bug-coreutils@gnu.org
GNU coreutils home page: <http://www.gnu.org/software/coreutils/>
General help using GNU software: <http://www.gnu.org/gethelp/>
For complete documentation, run: info coreutils 'yes invocation'
Usage: sync [OPTION]
Force changed blocks to disk, update the super block.

      --help     display this help and exit
      --version  output version information and exit

Report sync bugs to bug-coreutils@gnu.org
GNU coreutils home page: <http://www.gnu.org/software/coreutils/>
General help using GNU software: <http://www.gnu.org/gethelp/>
For complete documentation, run: info coreutils 'sync invocation'
STARTX(1)                                                  General Commands Manual                                                 STARTX(1)



NAME
       startx - initialize an X session

SYNOPSIS
       startx [ [ client ] options ... ] [ -- [ server ] [ display ] options ... ]

DESCRIPTION
       The startx script is a front end to xinit(1) that provides a somewhat nicer user interface for running a single session of the X Win‐
       dow System.  It is often run with no arguments.

       Arguments immediately following the startx command are used to start a client in the same manner as xinit(1).  The  special  argument
       '--'  marks  the  end  of  client arguments and the beginning of server options.  It may be convenient to specify server options with
       startx to change on a per-session basis the default color depth, the server's notion of  the  number  of  dots-per-inch  the  display
       device presents, or take advantage of a different server layout, as permitted by the Xorg(1) server and specified in the xorg.conf(5)
       configuration.  Some examples of specifying server arguments follow; consult the manual page for your X  server  to  determine  which
       arguments are legal.

              startx -- -depth 16

              startx -- -dpi 100

              startx -- -layout Multihead

       To determine the client to run, startx first looks for a file called .xinitrc in the user's home directory.  If that is not found, it
       uses the file xinitrc in the xinit library directory.  If command line client options are given,  they  override  this  behavior  and
       revert  to the xinit(1) behavior.  To determine the server to run, startx first looks for a file called .xserverrc in the user's home
       directory.  If that is not found, it uses the file xserverrc in the xinit library directory.  If  command  line  server  options  are
       given,  they  override  this  behavior and revert to the xinit(1) behavior.  Users rarely need to provide a .xserverrc file.  See the
       xinit(1) manual page for more details on the arguments.

       The system-wide xinitrc and xserverrc files are found in the /etc/X11/xinit directory.

ENVIRONMENT VARIABLES
       DISPLAY                  This variable gets set to the name of the display to which clients should connect.  Note that this gets set,
                                not read.

       XAUTHORITY               This variable, if not already defined, gets set to $(HOME)/.Xauthority.  This is to prevent the X server, if
                                not given the -auth argument, from automatically setting up insecure host-based authentication for the local
                                host.   See the Xserver(1) and Xsecurity(7) manual pages for more information on X client/server authentica‐
                                tion.

FILES
       $(HOME)/.xinitrc         Client to run.  Typically a shell script which runs many programs in the background.

       $(HOME)/.xserverrc       Server to run.  The default is X.

       /etc/X11/xinit/xinitrc   Client to run if the user has no .xinitrc file.

       /etc/X11/xinit/xserverrc Server to run if the user has no .xserverrc file.

SEE ALSO
       xinit(1), X(7), Xserver(1), Xorg(1), xorg.conf(5)



X Version 11                                                     xinit 1.3.2                                                       STARTX(1)
init(8)                                                    System Manager's Manual                                                   init(8)



NAME
       init - Upstart process management daemon

SYNOPSIS
       init [OPTION]...

DESCRIPTION
       init  is the parent of all processes on the system, it is executed by the kernel and is responsible for starting all other processes;
       it is the parent of all processes whose natural parents have died and it is responsible for reaping those when they die.

       Processes managed by init are known as jobs and are defined by files in the /etc/init directory.  See init(5)  for  more  details  on
       configuring Upstart.

   Events
       init(8)  is  an event-based init daemon.  This means that jobs will be automatically started and stopped by changes that occur to the
       system state, including as a result of jobs starting and stopping.

       This is different to dependency-based init daemons which start a specified set of goal jobs, and resolve  the  order  in  which  they
       should be started and other jobs required by iterating their dependencies.

       For  more  information on starting and stopping jobs, as well as emitting events that will automatically start and stop jobs, see the
       manual page for the initctl(8) tool.

       The primary event is the startup(7) event, emitted when the daemon has finished loading its configuration.  Other useful  events  are
       the starting(7), started(7), stopping(7) and stopped(7) events emitted as jobs change state.

   Job States
       Table 1: Job Goals and State Transitions.

       ┌───────────────┬──────────────────────────────────────────┐
       │               │                   Goal                   │
       │               ├───────────────┬──────────────────────────┤
       │Current State  │    start      │           stop           │
       ├───────────────┼───────────────┴──────────────────────────┤
       │waiting        │  starting        n/a                     │
       │starting       │  pre-start       stopping                │
       │pre-start      │  spawned         stopping                │
       │spawned        │  post-start      stopping                │
       │post-start     │  running         stopping                │
       │running        │  stopping        pre-stop / stopping (*) │
       │pre-stop       │  running         stopping                │
       │stopping       │  killed          killed                  │
       │killed         │  post-stop       post-stop               │
       │post-stop      │  starting        waiting                 │
       └───────────────┴──────────────────────────────────────────┘
       Key:
         (*) If there is a script or exec section and this process is running,
         state will be 'pre-stop', else it will be 'stopping'.


   Job Lifecycle
       Starting a Job

       1  Initially  the job is "at rest" with a goal of 'stop' and a state of 'waiting' (shown as 'stop/waiting' by the initctl(8) list and
          status commands).

       2  The goal is changed from 'stop' to 'start' indicating the job is attempting to start.

       3  The state is changed from 'waiting' to 'starting'.

       4  The starting(7) event is emitted denoting the job is "about to start".

       5  Any jobs whose 'start on' (or 'stop on') condition would be satisfied by this job starting are started (or stopped respectively).

       6  The starting(7) event completes.

       7  The state is changed from 'starting' to 'pre-start'.

       8  If the pre-start stanza exists, the pre-start process is spawned.

       9  If the pre-start process fails, the goal is changed from 'start' to 'stop', and the stopping(7) and stopped(7) events are  emitted
          with appropriate variables set denoting the error.

       10 Assuming the pre-start did not fail or did not call "stop", the main process is spawned.

       11 The state is changed from 'pre-start' to 'spawned'.

       12 Upstart  then  ascertains  the  final  PID  for the job which may be a descendent of the immediate child process if expect fork or
          expect daemon has been specified.

       13 The state is changed from 'spawned' to 'post-start'.

       14 If the post-start stanza exists, the post-start process is spawned.

       15 The state is changed from 'post-start' to 'running'.

       16 The started(7) event is emitted.

          For services, when this event completes the main process will now be fully running. If the job refers to a task, it will now  have
          completed (successfully or otherwise).

       17 Any  jobs  whose  'start on' (or 'stop on') condition would be satisfied by this job being started are started (or stopped respec‐
          tively).

       Stopping a Job

       1  Assuming the job is fully running, it will have a goal of 'start' and a state  of  'running'  (shown  as  'start/running'  by  the
          initctl(8) list and status commands).

       2  The goal is changed from 'start' to 'stop' indicating the job is attempting to stop.

       3  The state is changed from 'running' to 'pre-stop'.

       4  If the pre-stop stanza exists, the pre-stop process is spawned.

       5  The state is changed from 'pre-stop' to 'stopping'.

       6  The stopping(7) event is emitted.

       7  Any jobs whose 'start on' (or 'stop on') condition would be satisfied by this job stopping are started (or stopped respectively).

       8  The main process is stopped:

          i  The  signal  specified  by  the  kill  signal  stanza is sent to the process group of the main process (such that all processes
             belonging to the jobs main process are killed).  By default this signal is SIGTERM.

             See signal(7) and init(5).

          ii Upstart waits for up to "kill timeout" seconds (default 5 seconds) for the process to end.

          iii
             If the process is still running after the timeout, a SIGKILL signal is sent to the process which cannot  be  ignored  and  will
             forcibly stop the processes in the process group.

       9  The state is changed from 'killed' to 'post-stop'.

       10 If the post-stop stanza exists, the post-stop process is spawned.

       11 The state is changed from 'post-stop' to 'waiting'.

       12 The stopped(7) event is emitted.

          When this event completes, the job is fully stopped.

       13 Any  jobs  whose  'start on' (or 'stop on') condition would be satisfied by this job being stopped are started (or stopped respec‐
          tively).

   System V compatibility
       The Upstart init(8) daemon does not keep track of runlevels itself, instead they are implemented entirely  by  its  userspace  tools.
       The event emitted to signify a change of runlevel is the runlevel(7) event.  For more information see its manual page.

OPTIONS
       Options are passed to init(8) by placing them on the kernel command-line.

       --chroot-sessions
              Enable chroot session support. See Chroot Support in init(5).

       --confdir directory
              Read job configuration files from a directory other than the default (/etc/init for process ID 1).

              When running as process ID 1, the last directory specified will be used.

              In  user  session  mode,  multiple directories will be honoured and job configuration files loaded from the directories in the
              order specified.

       --default-console value
              Default value for jobs that do not specify a 'console' stanza. This could be used for example to set the default to 'none' but
              still honour jobs that specify explicitly 'console log'. See init(5) for all possible values of console.

       --no-dbus
              Do not connect to a D-Bus bus.

       --no-inherit-env
              Stop jobs from inheriting the initial environment. Only meaningful when running in user mode.

       --logdir directory
              Write  job  output log files to a directory other than /var/log/upstart (system mode) or $XDG_CACHE_HOME/upstart (user session
              mode).

       --no-log
              Disable logging of job output. Note that jobs specifying 'console log' will be treated  as  if  they  had  specified  'console
              none'.  See init(5) for further details.

       --no-sessions
              Disable chroot sessions (default).

       --no-startup-event
              Suppress  emission  of  the  initial startup event. This option should only be used for testing since it will stop the init(8)
              daemon from starting any jobs automatically.

       --session
              Connect to the D-Bus session bus. This should only be used for testing.

       --startup-event event
              Specify a different initial startup event from the standard startup(7).

       --user Starts in user mode, as used for user sessions. Upstart will be run as an unprivileged user, reading configuration files  from
              configuration locations as per roughly XDG Base Directory Specification. See init(5) for further details.

       -q, --quiet
              Reduces output messages to errors only.

       -v, --verbose
              Outputs verbose messages about job state changes and event emissions to the system console or log, useful for debugging boot.

       --version
              Outputs version information and exits.

NOTES
       init  is  not  normally executed by a user process, and expects to have a process id of 1.  If this is not the case, it will actually
       execute telinit(8) and pass all arguments to that.  See that manual page for further details. However, if the --user option is speci‐
       fied,  it  will  run  as  a Session Init and read alternative configuration files and manage the individual user session in a similar
       fashion.

       Sending a Session Init a SIGTERM signal is taken as a request to shutdown due to an impending system shutdown. In this scenario,  the
       Session  Init  will emit the session-end event and  request all running jobs stop. It will attempt to honour jobs kill timeout values
       (see init(5) for further details). Note however that system policy will prevail: if jobs request timeout values longer than the  sys‐
       tem  policy allows for complete system shutdown, it will not be possible to honour them before the Session Init is killed by the sys‐
       tem.

ENVIRONMENT VARIABLES
       When run as a user process, the following variables may be used to find job configuration files:


       ·   $XDG_CONFIG_HOME

       ·   $XDG_CONFIG_DIRS

       See User Session Mode in init(5) for further details.


FILES
       /etc/init.conf

       /etc/init/

       $HOME/.init/

       $XDG_CONFIG_DIRS/upstart/

       $XDG_CONFIG_HOME/upstart/

AUTHOR
       Written by Scott James Remnant <scott@netsplit.com>

REPORTING BUGS
       Report bugs at <https://launchpad.net/upstart/+bugs>

COPYRIGHT
       Copyright © 2009-2013 Canonical Ltd.
       This is free software; see the source for copying conditions.  There is NO warranty; not even for MERCHANTABILITY or  FITNESS  FOR  A
       PARTICULAR PURPOSE.

SEE ALSO
       all-swaps(7),  control-alt-delete(7),  dbus-daemon(1), dbus-event(7), dconf-event(7), file-event(7), filesystem(7), init(5), init(8),
       initctl(8), keyboard-request(7), local-filesystems(7), mountall(8), mounted(7), mounting(7), power-status-changed(7), remote-filesys‐
       tems(7),  runlevel(7),  shutdown(8),  socket-event(7),  started(7),  starting(7),  startup(7),  stopped(7),  stopping(7), telinit(8),
       upstart-dbus-bridge(8),     upstart-dconf-bridge(8),     upstart-event-bridge(8),     upstart-events(7),      upstart-file-bridge(8),
       upstart-local-bridge(8), upstart-socket-bridge(8), upstart-udev-bridge(8), virtual-filesystems(7).



Upstart                                                          2013-12-20                                                          init(8)
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
rahul     2775  0.0  0.1  26860  3828 pts/0    Ss   22:57   0:00 bash
rahul     3825  0.0  0.0  22644  1296 pts/0    R+   23:31   0:00 ps -u
             total       used       free     shared    buffers     cached
Mem:             2          1          0          0          0          0
-/+ buffers/cache:          0          1
Swap:            2          0          2
Usage: sdiff [OPTION]... FILE1 FILE2
Side-by-side merge of differences between FILE1 and FILE2.

Mandatory arguments to long options are mandatory for short options too.
  -o, --output=FILE            operate interactively, sending output to FILE

  -i, --ignore-case            consider upper- and lower-case to be the same
  -E, --ignore-tab-expansion   ignore changes due to tab expansion
  -Z, --ignore-trailing-space  ignore white space at line end
  -b, --ignore-space-change    ignore changes in the amount of white space
  -W, --ignore-all-space       ignore all white space
  -B, --ignore-blank-lines     ignore changes whose lines are all blank
  -I, --ignore-matching-lines=RE  ignore changes all whose lines match RE
      --strip-trailing-cr      strip trailing carriage return on input
  -a, --text                   treat all files as text

  -w, --width=NUM              output at most NUM (default 130) print columns
  -l, --left-column            output only the left column of common lines
  -s, --suppress-common-lines  do not output common lines

  -t, --expand-tabs            expand tabs to spaces in output
      --tabsize=NUM            tab stops at every NUM (default 8) print columns

  -d, --minimal                try hard to find a smaller set of changes
  -H, --speed-large-files      assume large files, many scattered small changes
      --diff-program=PROGRAM   use PROGRAM to compare files

      --help                   display this help and exit
  -v, --version                output version information and exit

If a FILE is '-', read standard input.
Exit status is 0 if inputs are the same, 1 if different, 2 if trouble.

Report bugs to: bug-diffutils@gnu.org
GNU diffutils home page: <http://www.gnu.org/software/diffutils/>
General help using GNU software: <http://www.gnu.org/gethelp/>
    January 2015      
Su Mo Tu We Th Fr Sa  
             1  2  3  
 4  5  6  7  8  9 10  
11 12 13 14 15 16 17  
18 19 20 21 22 23 24  
_2_5 26 27 28 29 30 31  
                      
WATCH(1)                                                        User Commands                                                       WATCH(1)



NAME
       watch - execute a program periodically, showing output fullscreen

SYNOPSIS
       watch [options] command

DESCRIPTION
       watch  runs command repeatedly, displaying its output and errors (the first screenfull).  This allows you to watch the program output
       change over time.  By default, the program is run every 2 seconds.  By default, watch will run until interrupted.

OPTIONS
       -d, --differences [permanent]
              Highlight the differences between successive updates.  Option will read optional argument that changes highlight to be  perma‐
              nent, allowing to see what has changed at least once since first iteration.

       -n, --interval seconds
              Specify  update  interval.   The command will not allow quicker than 0.1 second interval, in which the smaller values are con‐
              verted.

       -p, --precise
              Make watch attempt to run command every interval seconds. Try it with ntptime and notice  how  the  fractional  seconds  stays
              (nearly) the same, as opposed to normal mode where they continuously increase.

       -t, --no-title
              Turn  off the header showing the interval, command, and current time at the top of the display, as well as the following blank
              line.

       -b, --beep
              Beep if command has a non-zero exit.

       -e, --errexit
              Freeze updates on command error, and exit after a key press.

       -g, --chgexit
              Exit when the output of command changes.

       -c, --color
              Interpret ANSI color sequences.

       -x, --exec
              command is given to sh -c which means that you may need to use extra quoting to get the desired effect.  This with the  --exec
              option, which passes the command to exec(2) instead.

       -h, --help
              Display help text and exit.

       -v, --version
              Display version information and exit.

NOTE
       Note  that  POSIX  option processing is used (i.e., option processing stops at the first non-option argument).  This means that flags
       after command don't get interpreted by watch itself.

EXAMPLES
       To watch for mail, you might do

              watch -n 60 from

       To watch the contents of a directory change, you could use

              watch -d ls -l

       If you're only interested in files owned by user joe, you might use

              watch -d 'ls -l | fgrep joe'

       To see the effects of quoting, try these out

              watch echo $$
              watch echo '$$'
              watch echo "'"'$$'"'"

       To see the effect of precision time keeping, try adding -p to

              watch -n 10 sleep 1

       You can watch for your administrator to install the latest kernel with

              watch uname -r

       (Note that -p isn't guaranteed to work across reboots, especially in the face of ntpdate or other bootup time-changing mechanisms)

BUGS
       Upon terminal resize, the screen will not be correctly repainted until the next scheduled update.  All --differences highlighting  is
       lost on that update as well.

       Non-printing characters are stripped from program output.  Use "cat -v" as part of the command pipeline if you want to see them.

       Combining  Characters that are supposed to display on the character at the last column on the screen may display one column early, or
       they may not display at all.

       Combining Characters never count as different in --differences mode.  Only the base character counts.

       Blank lines directly after a line which ends in the last column do not display.

       --precise mode doesn't yet have advanced temporal distortion technology to compensate for a command that  takes  more  than  interval
       seconds  to execute.  watch also can get into a state where it rapid-fires as many executions of command as it can to catch up from a
       previous executions running longer than interval (for example, netstat taking ages on a DNS lookup).

EXIT STATUS
              0      Success.
              1      Various failures.
              2      Forking the process to watch failed.
              3      Replacing child process stdout with write side pipe failed.
              4      Command execution failed.
              5      Closign child process write pipe failed.
              7      IPC pipe creation failed.
              8      Getting child process return value with waitpid(2) failed, or command exited up on error.
              other  The watch will propagate command exit status as child exit status.
AUTHORS
       The original watch was written by Tony Rems ⟨rembo@unisoft.com⟩ in 1991, with mods  and  corrections  by  Francois  Pinard.   It  was
       reworked  and  new  features  added  by Mike Coleman ⟨mkc@acm.org⟩ in 1999. The beep, exec, and error handling features were added by
       Morty Abzug ⟨morty@frakir.org⟩ in 2008.  On a not so dark and stormy morning in March of 2003, Anthony  DeRobertis  ⟨asd@suespammers.
       org⟩  got  sick  of  his watches that should update every minute eventually updating many seconds after the minute started, and added
       microsecond precision.  Unicode support was added in 2009 by Jarrod Lowe ⟨procps@rrod.net⟩



procps-ng                                                         June 2011                                                         WATCH(1)
bzip2(1)                                                   General Commands Manual                                                  bzip2(1)



NAME
       bzip2, bunzip2 - a block-sorting file compressor, v1.0.6
       bzcat - decompresses files to stdout
       bzip2recover - recovers data from damaged bzip2 files


SYNOPSIS
       bzip2 [ -cdfkqstvzVL123456789 ] [ filenames ...  ]
       bzip2 [ -h|--help ]
       bunzip2 [ -fkvsVL ] [ filenames ...  ]
       bunzip2 [ -h|--help ]
       bzcat [ -s ] [ filenames ...  ]
       bzcat [ -h|--help ]
       bzip2recover filename


DESCRIPTION
       bzip2 compresses files using the Burrows-Wheeler block sorting text compression algorithm, and Huffman coding.  Compression is gener‐
       ally considerably better than that achieved by more conventional LZ77/LZ78-based compressors, and approaches the performance  of  the
       PPM family of statistical compressors.

       The command-line options are deliberately very similar to those of GNU gzip, but they are not identical.

       bzip2  expects  a  list  of file names to accompany the command-line flags.  Each file is replaced by a compressed version of itself,
       with the name "original_name.bz2".  Each compressed file has the same modification date, permissions, and, when  possible,  ownership
       as the corresponding original, so that these properties can be correctly restored at decompression time.  File name handling is naive
       in the sense that there is no mechanism for preserving original file names, permissions, ownerships or  dates  in  filesystems  which
       lack these concepts, or have serious file name length restrictions, such as MS-DOS.

       bzip2 and bunzip2 will by default not overwrite existing files.  If you want this to happen, specify the -f flag.

       If  no  file names are specified, bzip2 compresses from standard input to standard output.  In this case, bzip2 will decline to write
       compressed output to a terminal, as this would be entirely incomprehensible and therefore pointless.

       bunzip2 (or bzip2 -d) decompresses all specified files.  Files which were not created by bzip2 will be detected and  ignored,  and  a
       warning issued.  bzip2 attempts to guess the filename for the decompressed file from that of the compressed file as follows:

              filename.bz2    becomes   filename
              filename.bz     becomes   filename
              filename.tbz2   becomes   filename.tar
              filename.tbz    becomes   filename.tar
              anyothername    becomes   anyothername.out

       If the file does not end in one of the recognised endings, .bz2, .bz, .tbz2 or .tbz, bzip2 complains that it cannot guess the name of
       the original file, and uses the original name with .out appended.

       As with compression, supplying no filenames causes decompression from standard input to standard output.

       bunzip2 will correctly decompress a file which is the concatenation of two or more compressed files.  The result is the concatenation
       of the corresponding uncompressed files.  Integrity testing (-t) of concatenated compressed files is also supported.

       You  can also compress or decompress files to the standard output by giving the -c flag.  Multiple files may be compressed and decom‐
       pressed like this.  The resulting outputs are fed sequentially to stdout.  Compression of multiple files in this manner  generates  a
       stream  containing multiple compressed file representations.  Such a stream can be decompressed correctly only by bzip2 version 0.9.0
       or later.  Earlier versions of bzip2 will stop after decompressing the first file in the stream.

       bzcat (or bzip2 -dc) decompresses all specified files to the standard output.

       bzip2 will read arguments from the environment variables BZIP2 and BZIP, in that order, and will process them  before  any  arguments
       read from the command line.  This gives a convenient way to supply default arguments.

       Compression is always performed, even if the compressed file is slightly larger than the original.  Files of less than about one hun‐
       dred bytes tend to get larger, since the compression mechanism has a constant overhead in  the  region  of  50  bytes.   Random  data
       (including the output of most file compressors) is coded at about 8.05 bits per byte, giving an expansion of around 0.5%.

       As  a self-check for your protection, bzip2 uses 32-bit CRCs to make sure that the decompressed version of a file is identical to the
       original.  This guards against corruption of the compressed data, and against undetected bugs in  bzip2  (hopefully  very  unlikely).
       The  chances of data corruption going undetected is microscopic, about one chance in four billion for each file processed.  Be aware,
       though, that the check occurs upon decompression, so it can only tell you that something is wrong.  It can't  help  you  recover  the
       original uncompressed data.  You can use bzip2recover to try to recover data from damaged files.

       Return  values:  0  for  a normal exit, 1 for environmental problems (file not found, invalid flags, I/O errors, &c), 2 to indicate a
       corrupt compressed file, 3 for an internal consistency error (eg, bug) which caused bzip2 to panic.


OPTIONS
       -c --stdout
              Compress or decompress to standard output.

       -d --decompress
              Force decompression.  bzip2, bunzip2 and bzcat are really the same program, and the decision about what  actions  to  take  is
              done on the basis of which name is used.  This flag overrides that mechanism, and forces bzip2 to decompress.

       -z --compress
              The complement to -d: forces compression, regardless of the invocation name.

       -t --test
              Check  integrity  of  the specified file(s), but don't decompress them.  This really performs a trial decompression and throws
              away the result.

       -f --force
              Force overwrite of output files.  Normally, bzip2 will not overwrite existing output files.  Also forces bzip2 to  break  hard
              links to files, which it otherwise wouldn't do.

              bzip2 normally declines to decompress files which don't have the correct magic header bytes.  If forced (-f), however, it will
              pass such files through unmodified.  This is how GNU gzip behaves.

       -k --keep
              Keep (don't delete) input files during compression or decompression.

       -s --small
              Reduce memory usage, for compression, decompression and testing.  Files are decompressed and tested using a modified algorithm
              which  only  requires  2.5 bytes per block byte.  This means any file can be decompressed in 2300 k of memory, albeit at about
              half the normal speed.

              During compression, -s selects a block size of 200 k, which limits memory use to around the same figure,  at  the  expense  of
              your  compression ratio.  In short, if your machine is low on memory (8 megabytes or less), use -s for everything.  See MEMORY
              MANAGEMENT below.

       -q --quiet
              Suppress non-essential warning messages.  Messages pertaining to I/O errors and other critical events will not be suppressed.

       -v --verbose
              Verbose mode -- show the compression ratio for each file processed.  Further -v's increase the verbosity  level,  spewing  out
              lots of information which is primarily of interest for diagnostic purposes.

       -h --help
              Print a help message and exit.

       -L --license -V --version
              Display the software version, license terms and conditions.

       -1 (or --fast) to -9 (or --best)
              Set  the  block  size  to  100 k, 200 k ...  900 k when compressing.  Has no effect when decompressing.  See MEMORY MANAGEMENT
              below.  The --fast and --best aliases are primarily for GNU gzip compatibility.  In particular,  --fast  doesn't  make  things
              significantly faster.  And --best merely selects the default behaviour.

       --     Treats  all  subsequent  arguments  as file names, even if they start with a dash.  This is so you can handle files with names
              beginning with a dash, for example: bzip2 -- -myfilename.

       --repetitive-fast --repetitive-best
              These flags are redundant in versions 0.9.5 and above.  They provided some coarse control over the behaviour  of  the  sorting
              algorithm  in  earlier  versions,  which was sometimes useful.  0.9.5 and above have an improved algorithm which renders these
              flags irrelevant.


MEMORY MANAGEMENT
       bzip2 compresses large files in blocks.  The block size affects both the compression ratio achieved, and the amount of memory  needed
       for  compression  and  decompression.   The flags -1 through -9 specify the block size to be 100,000 bytes through 900,000 bytes (the
       default) respectively.  At decompression time, the block size used for compression is read from the header of  the  compressed  file,
       and  bunzip2  then  allocates itself just enough memory to decompress the file.  Since block sizes are stored in compressed files, it
       follows that the flags -1 to -9 are irrelevant to and so ignored during decompression.

       Compression and decompression requirements, in bytes, can be estimated as:

              Compression:   400 k + ( 8 x block size )

              Decompression: 100 k + ( 4 x block size ), or
                             100 k + ( 2.5 x block size )

       Larger block sizes give rapidly diminishing marginal returns.  Most of the compression comes from the first two or three hundred k of
       block  size, a fact worth bearing in mind when using bzip2 on small machines.  It is also important to appreciate that the decompres‐
       sion memory requirement is set at compression time by the choice of block size.

       For files compressed with the default 900 k block size, bunzip2 will require about 3700 kbytes to decompress.  To support  decompres‐
       sion  of  any file on a 4 megabyte machine, bunzip2 has an option to decompress using approximately half this amount of memory, about
       2300 kbytes.  Decompression speed is also halved, so you should use this option only where necessary.  The relevant flag is -s.

       In general, try and use the largest block size memory constraints allow, since that maximises the compression achieved.   Compression
       and decompression speed are virtually unaffected by block size.

       Another  significant  point applies to files which fit in a single block -- that means most files you'd encounter using a large block
       size.  The amount of real memory touched is proportional to the size of the file, since the file is smaller than a block.  For  exam‐
       ple,  compressing  a  file 20,000 bytes long with the flag -9 will cause the compressor to allocate around 7600 k of memory, but only
       touch 400 k + 20000 * 8 = 560 kbytes of it.  Similarly, the decompressor will allocate 3700 k but only touch 100 k + 20000 * 4 =  180
       kbytes.

       Here  is a table which summarises the maximum memory usage for different block sizes.  Also recorded is the total compressed size for
       14 files of the Calgary Text Compression Corpus totalling 3,141,622 bytes.  This column gives some feel for  how  compression  varies
       with  block  size.   These figures tend to understate the advantage of larger block sizes for larger files, since the Corpus is domi‐
       nated by smaller files.

                  Compress   Decompress   Decompress   Corpus
           Flag     usage      usage       -s usage     Size

            -1      1200k       500k         350k      914704
            -2      2000k       900k         600k      877703
            -3      2800k      1300k         850k      860338
            -4      3600k      1700k        1100k      846899
            -5      4400k      2100k        1350k      845160
            -6      5200k      2500k        1600k      838626
            -7      6100k      2900k        1850k      834096
            -8      6800k      3300k        2100k      828642
            -9      7600k      3700k        2350k      828642


RECOVERING DATA FROM DAMAGED FILES
       bzip2 compresses files in blocks, usually 900 kbytes long.  Each block is handled independently.  If a media  or  transmission  error
       causes a multi-block .bz2 file to become damaged, it may be possible to recover data from the undamaged blocks in the file.

       The  compressed  representation  of each block is delimited by a 48-bit pattern, which makes it possible to find the block boundaries
       with reasonable certainty.  Each block also carries its own 32-bit CRC, so damaged blocks can be distinguished from undamaged ones.

       bzip2recover is a simple program whose purpose is to search for blocks in .bz2 files, and write each block  out  into  its  own  .bz2
       file.  You can then use bzip2 -t to test the integrity of the resulting files, and decompress those which are undamaged.

       bzip2recover  takes  a  single  argument,  the  name  of  the  damaged  file,  and  writes  a  number  of  files  "rec00001file.bz2",
       "rec00002file.bz2", etc., containing the  extracted  blocks.  The output filenames are designed so that the use of wildcards in  sub‐
       sequent processing -- for example, "bzip2 -dc rec*file.bz2 > recovered_data" -- processes the files in the correct order.

       bzip2recover  should be of most use dealing with large .bz2 files, as these will contain many blocks.  It is clearly futile to use it
       on damaged single-block files, since a damaged block cannot be recovered.  If you wish to minimise any potential  data  loss  through
       media or transmission errors, you might consider compressing with a smaller block size.


PERFORMANCE NOTES
       The  sorting  phase of compression gathers together similar strings in the file.  Because of this, files containing very long runs of
       repeated symbols, like "aabaabaabaab ..." (repeated several hundred times) may compress more slowly than normal.  Versions 0.9.5  and
       above  fare much better than previous versions in this respect.  The ratio between worst-case and average-case compression time is in
       the region of 10:1.  For previous versions, this figure was more like 100:1.  You can use the -vvvv option  to  monitor  progress  in
       great detail, if you want.

       Decompression speed is unaffected by these phenomena.

       bzip2  usually  allocates  several  megabytes of memory to operate in, and then charges all over it in a fairly random fashion.  This
       means that performance, both for compressing and decompressing, is largely determined by the speed at which your machine can  service
       cache misses.  Because of this, small changes to the code to reduce the miss rate have been observed to give disproportionately large
       performance improvements.  I imagine bzip2 will perform best on machines with very large caches.


CAVEATS
       I/O error messages are not as helpful as they could be.  bzip2 tries hard to detect I/O errors and exit cleanly, but the  details  of
       what the problem is sometimes seem rather misleading.

       This manual page pertains to version 1.0.6 of bzip2.  Compressed data created by this version is entirely forwards and backwards com‐
       patible with the previous public releases, versions 0.1pl2, 0.9.0, 0.9.5, 1.0.0, 1.0.1, 1.0.2  and  above,  but  with  the  following
       exception:  0.9.0  and  above  can  correctly decompress multiple concatenated compressed files.  0.1pl2 cannot do this; it will stop
       after decompressing just the first file in the stream.

       bzip2recover versions prior to 1.0.2 used 32-bit integers to represent bit positions in compressed files, so they  could  not  handle
       compressed  files  more  than 512 megabytes long.  Versions 1.0.2 and above use 64-bit ints on some platforms which support them (GNU
       supported targets, and Windows).  To establish whether or not bzip2recover was built with such a limitation,  run  it  without  argu‐
       ments.   In  any  event  you  can  build yourself an unlimited version if you can recompile it with MaybeUInt64 set to be an unsigned
       64-bit integer.




AUTHOR
       Julian Seward, jsewardbzip.org.

       http://www.bzip.org

       The ideas embodied in bzip2 are due to (at least) the following people: Michael Burrows and David  Wheeler  (for  the  block  sorting
       transformation),  David  Wheeler (again, for the Huffman coder), Peter Fenwick (for the structured coding model in the original bzip,
       and many refinements), and Alistair Moffat, Radford Neal and Ian Witten (for the arithmetic coder in the original bzip).  I  am  much
       indebted  for  their  help,  support and advice.  See the manual in the source distribution for pointers to sources of documentation.
       Christian von Roques encouraged me to look for faster sorting algorithms, so as to speed up compression.  Bela Lubkin  encouraged  me
       to improve the worst-case compression performance.  Donna Robinson XMLised the documentation.  The bz* scripts are derived from those
       of GNU gzip.  Many people sent patches, helped with portability problems, lent machines, gave advice and were generally helpful.



                                                                                                                                    bzip2(1)
/:  Bus 05.Port 1: Dev 1, Class=root_hub, Driver=ohci-pci/4p, 12M
/:  Bus 04.Port 1: Dev 1, Class=root_hub, Driver=ohci-pci/2p, 12M
/:  Bus 03.Port 1: Dev 1, Class=root_hub, Driver=ohci-pci/5p, 12M
/:  Bus 02.Port 1: Dev 1, Class=root_hub, Driver=ehci-pci/4p, 480M
    |__ Port 2: Dev 2, If 0, Class=Video, Driver=uvcvideo, 480M
    |__ Port 2: Dev 2, If 1, Class=Video, Driver=uvcvideo, 480M
/:  Bus 01.Port 1: Dev 1, Class=root_hub, Driver=ehci-pci/5p, 480M
    |__ Port 3: Dev 2, If 0, Class=Vendor Specific Class, Driver=usbfs, 480M
DMESG(1)                                                        User Commands                                                       DMESG(1)



NAME
       dmesg - print or control the kernel ring buffer

SYNOPSIS
       dmesg [options]

       dmesg --clear

       dmesg --read-clear [options]

       dmesg --console-level level

       dmesg --console-on

       dmesg --console-off

DESCRIPTION
       dmesg is used to examine or control the kernel ring buffer.

       The default action is to read all messages from kernel ring buffer.


OPTIONS
       The --clear, --read-clear, --console-on, --console-off and --console-level options are mutually exclusive.


       -C, --clear
              Clear the ring buffer.

       -c, --read-clear
              Clear the ring buffer contents after printing.

       -D, --console-off
              Disable printing messages to the console.

       -d, --show-delta
              Display  the  timestamp and time delta spent between messages. If used together with --notime then only the time delta without
              the timestamp is printed.

       -E, --console-on
              Enable printing messages to the console.

       -f, --facility list
              Restrict output to defined (comma separated) list of facilities. For example

                dmesg --facility=daemon

              will print messages from system daemons only. For all supported facilities see dmesg --help output.

       -h, --help
              Print a help text and exit.

       -k, --kernel
              Print kernel messages.

       -l, --level list
              Restrict output to defined (comma separated) list of levels. For example

                dmesg --level=err,warn

              will print error and warning messages only. For all supported levels see dmesg --help output.

       -n, --console-level level
              Set the level at which logging of messages is done to the console. The level is a level number or abbreviation  of  the  level
              name. For all supported levels see dmesg --help output.

              For  example,  -n  1 or -n alert prevents all messages, except emergency (panic) messages, from appearing on the console.  All
              levels of messages are still written to /proc/kmsg, so syslogd(8) can still be used to control exactly where  kernel  messages
              appear.  When the -n option is used, dmesg will not print or clear the kernel ring buffer.

       -r, --raw
              Print the raw message buffer, i.e., don't strip the log level prefixes.

       -s, --buffer-size size
              Use  a  buffer of size to query the kernel ring buffer.  This is 16392 by default.  (The default kernel syslog buffer size was
              4096 at first, 8192 since 1.3.54, 16384 since 2.1.113.)  If you have set the kernel buffer to be larger than the default  then
              this option can be used to view the entire buffer.

       -T, --ctime
              Print human readable timestamps. The timestamp could be inaccurate!

              The time source used for the logs is not updated after system SUSPEND/RESUME.

       -t, --notime
              Don't print kernel's timestampts.

       -u, --userspace
              Print userspace messages.

       -V, --version
              Output version information and exit.

       -x, --decode
              Decode facility and level (priority) number to human readable prefixes.

SEE ALSO
       syslogd(8)

AUTHORS
       Karel Zak <kzak@redhat.com>
       Theodore Ts'o <tytso@athena.mit.edu>

AVAILABILITY
       The dmesg command is part of the util-linux package and is available from ftp://ftp.kernel.org/pub/linux/utils/util-linux/.



util-linux                                                        July 2011                                                         DMESG(1)
